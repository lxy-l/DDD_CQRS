领域（Domain）其实就是一个组织所要做的整个事情，已经这个事情下所包含的一切内容。这是一个范围概念，而且是面向业务的（注意这里不是面向技术的，更不是面向数据库的持久化的），每个组织都有自己的人员、自己的工作业务范围和做事方式，当你为该组织开发软件的时候，你面对的就是这个组织的领域。

战略设计中定义了，一个领域就是一个问题空间，我们在业务中所遇到的所有的问题与挑战；

在战术设计中，一个领域就算一个解决问题空间，用来解决在问题空间的所有问题； 



事件溯源 —— Event Source：(事件溯源不属于DDD领域驱动设计,他们是并行的两个框架模型.)

	CQRS与事件溯源有着相辅相成的关系。CQRS允许事件溯源作为领域的数据存储机制。
		
		当将CQRS和事件溯源模式结合起来的时候，考虑以下几点：

			1.对于任何的读写分离储存的系统，这些系统基于事件溯源模式都是“最终一致”的。因此在事件产生和数据存储之间会有一些延迟。
			2.这种模式会造成一些额外的复杂度，因为代码必须要能够初始化和处理事件，然后组合或者更新相应的读写模型需要视图或者对象。这种复杂度会对让系统的实现变得有些困难，需要重新学习一些概念和一个不同的设计系统的方式。然而事件溯源可以让为领域建模，让重建视图或者对象更加容易。
			3.生成物化视图

	这种模式在以下几种场景中是最理想的解决方案：

		1.当你想获得数据的“意图”，“目的”或者“原因”的时候。 例如，一个客户的实体改变可能用一系列的类似于”搬家“，”注销账户“或者”死亡“等事件类型。
		2.并发更新数据时候非常需要减少或者完全避免冲突的时候。
		3.当你需要保存已经发生的事件，并且能够重播他们来还原到某个状态、使用这些事件去回滚系统的某些变化或者仅仅是历史或者审查记录的时候。例如 ，当一个任务包括几个步骤，你可能需要执行一个撤销更新的操作然后重播过去的每个步骤来回到稳定的状态。
		4.当使用事件是一些应用程序的某些操作的天然属性，并且需要很少的额外扩展或者实施的时候。
		5.当你需要把插入，更新数据和需要执行这些操作的应用程序解耦开的时候。用这种模式可以提高UI的性能，或者把这些事件分发给其他的监听者，比如有些应用程序或系统，它们在一些事件发生的时候必须做出一些反应。例如，将一个工资系统和一个报销系统结合起来，这样的话当报销系统更新一个事件给事件数据库，数据库对此做出的相应事件就可以被报销系统和工资系统共享。
		6.当要求变更或者——当和CQRS配合使用的时候——你需要适配一个读的模型或者视图来显示数据，而你想要更灵活地改变物化视图的格式和实体数据的时候。
		7.当和CQRS配合使用的时候，并且当一个读模型被更新时能接受数据的最终一致性问题，或者说从一系列的事件序列中生成实体对性能的影响可以被接受。
  
   这种模式在以下几种场景中可能并不适用：

	1.小而简单的，业务逻辑简单或者根本没有业务逻辑，或者领域概念的，一般传统的增删改查（CURD）就能实现功能的业务领域，或者系统。
	2.需要实时一致和实时更新数据的系统。
	3.不需要审查，历史和回滚的系统。
	4.并发更新数据可能性非常小的系统。例如，只增加数据不更新数据的系统。